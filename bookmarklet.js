javascript:(()=>{
(function(){"use strict";if(window.harvest||window.silo)return;const e="";const t="&s=indexed&o=desc";const n="&s=indexed&o=asc";window.silo={};window.harvest=o;Object.defineProperty(window.silo,"reap",{value:u,writable:false,configurable:false});let s=null;Object.defineProperty(window,"that",{get:()=>s?u(s):""});function o(o,r=null){if(!/^extension:|filename:/.test(o))o="extension:"+o;return new Promise(c=>{if(!r){const e=Math.random(1e6).toString(16).replace(/\./,"").toUpperCase();r="NOT nothack"+e}const a=encodeURIComponent(`${o} ${r}`).replace(/%20/g,"+");const l=`https://github.com/search?q=${a}&type=Code`;return i(l,e,o).then(e=>{return e>1e3?i(l,t,o).then(()=>i(l,n,o)).then(()=>c()):c()}).then(()=>{const e="Run `copy(that);` in your console to copy the URLs to your clipboard.";new Notification(`Harvest complete for ${o}`,{body:e});s=o})})}function i(e,t,n){const s=silo[n]||(silo[n]={length:0});return new Promise((n,o)=>{let i=0;let a;let u;f().then(()=>Promise.resolve(u));function f(){return l(e+t+(i?"&p="+(i+1):"")).catch(e=>o(e)).then(e=>e.text().then(e=>{if(/<div[^>]+class="blankslate">/.test(e)){const t="Must include at least one user, organization, or repository";const n=t.split(" ").join("\\s+");const s=new RegExp(n,"i").test(e)?["Failed.","GitHub's doing that weird thing again:",`\t> "${t}"`].join("\n\n"):"No results";return o(s)}c(e,s);if(undefined===a){const t=e.match(/">(\d+)<\/a>\s*<a[^>]+?class="next_page"[^>]+?rel="next"/i);if(t){u=+e.match(/<h3>\s*(?:We.ve\s+found\s+)?([,\d]+)\s+code\s+results/i)[1].replace(/\D/g,"");a=t[1]}else{u=s.length;a=1}}++i;if(i>=a)return n(u);return r(2e3).then(()=>f())}))}})}function r(e){return new Promise(t=>setTimeout(()=>t(),e))}function c(e,t){const n=e.match(/<div[^>]+id="code_search_results"[^>]*>/i);const s=e.match(/<div[^>]+id="search_cheatsheet_pane"/i);e=e.substring(n.index,s.index);const o=e.split(/<div[^>]+class="[^"]*code-list-item[^"]+code-list-item-public[^"]*"[^>]*>/gi);for(const e of o){const n=a(e);const s=n.find(e=>/^@[^@]/.test(e.alt)&&-1!==e.classList.indexOf("avatar"));if(!s)continue;const o=e.match(/^(?:.|\n)*?(?:&#8211;|â€“)\s*<a[^>]+href="([^"]+)"/i)[1];if(!t[o]){t[o]=o.replace(/^((?:\/[^/]+){2})\/blob(?=\/)/gim,"https://raw.githubusercontent.com$1");++t.length}}}function a(e){const t=[];const n=e.match(/<img[^>]*>/gi);if(!n)return t;for(const e of n){const n=Object.create(null);const s=e.replace(/^<img\s*|\s*\/?>$/g,"").match(/([^=]+)\s*=\s*("[^"]*"|'[^']*'|[^'"\s]+)/g).map(e=>{const[t,n]=e.match(/^\s*([^\s=]+)=(.*)$/).slice(1);return[t.toLowerCase(),n.replace(/^(["'])(.*)\1$/,"$2")]});for(let[e,t]of s)switch(e){case"width":case"height":n[e]=parseInt(t);break;case"class":n.className=t;n.classList=t.trim().split(/\s+/);break;default:n[e]=t}t.push(n)}return t}function l(e){return new Promise((t,n)=>{const s=new XMLHttpRequest;s.open("GET",e);s.addEventListener("readystatechange",()=>{if(XMLHttpRequest.DONE===s.readyState)t({text:()=>Promise.resolve(s.response)})});for(const e of"abort error timeout".split(" "))s.addEventListener(e,e=>n(e));s.send()})}function u(e){if(!/^extension:|filename:/.test(e)){const t="extension:"+e in silo;const n="filename:"+e in silo;if(t&&n){const t=`Both extension:${e} and filename:${e} properties exist in silo.`;throw new ReferenceError(t+" Which did you mean?")}if(t)e="extension:"+e;else if(n)e="filename:"+e}const t=silo[e]||{};return Object.keys(t).filter(e=>e!=="length").map(e=>t[e]).sort((e,t)=>{e=e.toLowerCase();t=t.toLowerCase();if(e<t)return-1;if(e>t)return 1;return 0}).join("\n")}})();Notification.requestPermission();
let q=prompt("Enter an extension or filename to harvest:");q&&harvest(q)})();